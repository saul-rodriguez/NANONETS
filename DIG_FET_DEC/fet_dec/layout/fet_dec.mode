catch { setDesignMode -process 180 }
catch { setAnalysisMode -analysisType bcwc }
catch { setAnalysisMode -checkType setup }
catch { setAnalysisMode -clkSrcPath true }
catch { setAnalysisMode -clockPropagation sdcControl }
catch { setAnalysisMode -skew true }
catch { setAnalysisMode -virtualIPO false }
catch { setOptMode -activeHoldViews { func_min test_min } }
catch { setOptMode -activeSetupViews { func_max test_max } }
catch { setOptMode -autoSetupViews { test_max} }
catch { setOptMode -drcMargin 0 }
catch { setOptMode -effort high }
catch { setOptMode -fixCap true }
catch { setOptMode -fixFanoutLoad false }
catch { setOptMode -fixTran true }
catch { setOptMode -preserveAllSequential false }
catch { setOptMode -setupTargetSlack 0 }
setExtractRCMode  -lefTechFileMap /pkg/AMS414/cds/HK_AC18/LEF/ac18a6/qrclaymap.ccl -engine postRoute -coupled false -minNetTermNrToBeInMem 50
catch { setCTSMode -moveGateLimit 25 }
catch { setCTSMode -routeBottomPreferredLayer M1 }
catch { setCTSMode -routeLeafBottomPreferredLayer M1 }
catch { setCTSMode -routeLeafTopPreferredLayer MT }
catch { setCTSMode -routeTopPreferredLayer MT }
catch { set_ccopt_mode -cts_target_nonleaf_slew 2 }
catch { set_ccopt_mode -cts_target_slew 1 }
catch { set_ccopt_mode -is_mode_set_route_top_mask false }
catch { set_ccopt_mode -is_mode_set_route_top_preferred_extra_space false }
catch {setNanoRouteMode -quiet -droutePostRouteWidenWireRule "VSRDefaultSetup"}
catch {setNanoRouteMode -quiet -drouteUseMinSpacingForBlockage auto}
catch {setNanoRouteMode -quiet -routeAntennaCellName "ANTENNA"}
catch {setNanoRouteMode -quiet -routeInsertAntennaDiode true}
catch {setNanoRouteMode -quiet -routeStrictlyHonorNonDefaultRule "false"}
catch {setNanoRouteMode -quiet -routeTopRoutingLayer 5}

catch { setPlaceMode -checkRoute false }
catch { setPlaceMode -clkGateAware true }
catch { setPlaceMode -congEffort auto }
catch { setPlaceMode -fp false }
catch { setPlaceMode -ignoreScan true }
catch { setPlaceMode -ignoreSpare false }
catch { setPlaceMode -moduleAwareSpare false }
catch { setPlaceMode -modulePlan true }
catch { setPlaceMode -placeIoPins false }
catch { setPlaceMode -powerDriven false }
catch { setPlaceMode -preserveRouting false }
catch { setPlaceMode -reorderScan true }
catch { setPlaceMode -rmAffectedRouting false }
catch { setPlaceMode -swapEEQ false }
catch { setPlaceMode -timingDriven true }
catch { setIlmMode -keepHighFanoutPorts true -keepLoopBack false -keepFlatten true }
catch { setVerifyGeometryMode -antenna false }
catch { setVerifyGeometryMode -area {0 0 0 0} }
catch { setVerifyGeometryMode -diffCellViol true }
catch { setVerifyGeometryMode -error 1000 }
catch { setVerifyGeometryMode -implantCheck true }
catch { setVerifyGeometryMode -insuffMetalOverlap true }
catch { setVerifyGeometryMode -maxNonPrefLength -1 }
catch { setVerifyGeometryMode -maxWidth true }
catch { setVerifyGeometryMode -mergedMGridCheck true }
catch { setVerifyGeometryMode -minArea true }
catch { setVerifyGeometryMode -minHole true }
catch { setVerifyGeometryMode -minimumCut true }
catch { setVerifyGeometryMode -minSpacing true }
catch { setVerifyGeometryMode -minStep true }
catch { setVerifyGeometryMode -minWidth true }
catch { setVerifyGeometryMode -offMGrid true }
catch { setVerifyGeometryMode -offRGrid false }
catch { setVerifyGeometryMode -overlap true }
catch { setVerifyGeometryMode -padFillerCellsOverlap true }
catch { setVerifyGeometryMode -pinInBlkg false }
catch { setVerifyGeometryMode -regRoutingOnly false }
catch { setVerifyGeometryMode -routingBlkgPinOverlap true }
catch { setVerifyGeometryMode -routingCellBlkgOverlap true }
catch { setVerifyGeometryMode -sameCellViol false }
catch { setVerifyGeometryMode -sameNet true }
catch { setVerifyGeometryMode -short true }
catch { setVerifyGeometryMode -stackedViasOnRegNet false }
catch { setVerifyGeometryMode -useNonDefaultSpacing false }
catch { setVerifyGeometryMode -viaEnclosure true }
catch { setVerifyGeometryMode -wireExt true }
catch { set_ccopt_mode -cts_target_nonleaf_slew 2 }
catch { set_ccopt_mode -cts_target_slew 1 }
catch { set_ccopt_mode -is_mode_set_route_top_mask false }
catch { set_ccopt_mode -is_mode_set_route_top_preferred_extra_space false }
catch { setUsefulSkewMode -ecoRoute false }
catch { setUsefulSkewMode -maxAllowedDelay 1 }
catch { setUsefulSkewMode -maxSkew false }
catch { setUsefulSkewMode -noBoundary false }
catch { setUsefulSkewMode -useCells {DLY4X1 DLY3X1 DLY2X1 DLY1X1 CLKBUFX32 CLKBUFX24 CLKBUFX16 CLKBUFX12 CLKBUFX10 CLKBUFX8 CLKBUFX6 CLKBUFX4 CLKBUFX3 CLKBUFX2 BUFX32 BUFX24 BUFX16 BUFX12 BUFX8 BUFX6 BUFX4 BUFX3 BUFX2 INVX32 INVX24 INVX16 INVX12 INVX8 INVX6 INVX4 INVX3 INVX2 INVX1 INVXL CLKINVX32 CLKINVX24 CLKINVX16 CLKINVX12 CLKINVX10 CLKINVX8 CLKINVX6 CLKINVX4 CLKINVX3 CLKINVX2 CLKINVX1} }
catch { setViaGenMode -parameterized_via_only true }
catch { setViaGenMode -symmetrical_via_only true }
catch { set_verify_drc_mode -area {0 0 0 0} }
catch { set_verify_drc_mode -check_implant true }
catch { set_verify_drc_mode -check_implant_across_rows false }
catch { set_verify_drc_mode -check_ndr_spacing false }
catch { set_verify_drc_mode -check_same_via_cell false }
catch { set_verify_drc_mode -disable_rules "" }
catch { set_verify_drc_mode -exclude_pg_net false }
catch { set_verify_drc_mode -ignore_trial_route false }
catch { set_verify_drc_mode -limit 1000 }
catch { set_verify_drc_mode -report fet_dec.drc.rpt }
catch { setDelayCalMode -enable_high_fanout true }
catch { setDelayCalMode -engine aae }
catch { setDelayCalMode -ignoreNetLoad false }
catch { setDelayCalMode -SIAware false }
catch { setPinAssignMode -maxLayer 5 }
catch { setPinAssignMode -pinEditInBatch false }
catch { setTrialRouteMode -handlePreroute true }
catch { setTrialRouteMode -keepMarkedOptRoutes true }
catch { setTrialRouteMode -maxRouteLayer 5 }
catch { setCheckMode -tapeOut true }
catch { setHierMode -disableArt false }
catch { setHierMode -reportPostRouteArtTiming false }
catch { setHierMode -trialRouteHonorReadOnly false }
catch { setImportMode -config true }
catch { setImportMode -keepEmptyModule true }
catch { setImportMode -treatUndefinedCellAsBbox false }
catch { setGenerateViaMode -auto true }
catch { setEndCapMode -boundary_tap false }
